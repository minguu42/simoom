syntax = "proto3";

package simoompb.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/minguu42/simoom/gen/simoompb/v1;simoompb";

message Date {
  uint32 year = 1;
  uint32 month = 2;
  uint32 day = 3;
}

message CheckHealthRequest {}

message CheckHealthResponse {
  string revision = 1;
}

service MonitoringService {
  rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse);
}

message CreateProjectRequest {
  string name = 1;
  string color = 2;
}

message ListProjectsRequest {}

message UpdateProjectRequest {
  string id = 1;
  optional string name = 2;
  optional string color = 3;
  optional bool is_archived = 4;
}

message DeleteProjectRequest {
  string id = 1;
}

message ProjectResponse {
  string id = 1;
  string name = 2;
  string color = 3;
  bool is_archived = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message ProjectsResponse {
  repeated ProjectResponse projects = 1;
  bool has_next = 2;
}

service ProjectService {
  rpc CreateProject(CreateProjectRequest) returns (ProjectResponse);
  rpc ListProjects(ListProjectsRequest) returns (ProjectsResponse);
  rpc UpdateProject(UpdateProjectRequest) returns (ProjectResponse);
  rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);
}

message CreateTaskRequest {
  string title = 1;
  uint32 priority = 2;
}

message ListTasksRequest {
  uint64 limit = 1;
  uint64 offset = 2;
}

message UpdateTaskRequest {
  string id = 1;
  optional string title = 2;
  optional string content = 3;
  optional uint32 priority = 4;
  optional Date due_on = 5;
  optional google.protobuf.Timestamp completed_at = 6;
}

message DeleteTaskRequest {
  string id = 1;
}

message TaskResponse {
  string id = 1;
  string project_id = 2;
  string title = 3;
  string content = 4;
  uint32 priority = 5;
  Date due_on = 6;
  google.protobuf.Timestamp completed_at = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

message TasksResponse {
  repeated TaskResponse tasks = 1;
  bool has_next = 2;
}

service TaskService {
  rpc CreateTask(CreateTaskRequest) returns (TaskResponse);
  rpc ListTasks(ListTasksRequest) returns (TasksResponse);
  rpc UpdateTask(UpdateTaskRequest) returns (TaskResponse);
  rpc DeleteTask(DeleteTaskRequest) returns (google.protobuf.Empty);
}
