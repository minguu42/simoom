// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"sync"

	"connectrpc.com/connect"
	"github.com/minguu42/simoom/lib/go/simoompb/v1"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			CheckCredentialsFunc: func() bool {
//				panic("mock out the CheckCredentials method")
//			},
//			CheckHealthFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.CheckHealthRequest]) (*connect.Response[simoompb.CheckHealthResponse], error) {
//				panic("mock out the CheckHealth method")
//			},
//			CreateProjectFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateProjectRequest]) (*connect.Response[simoompb.Project], error) {
//				panic("mock out the CreateProject method")
//			},
//			CreateStepFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateStepRequest]) (*connect.Response[simoompb.Step], error) {
//				panic("mock out the CreateStep method")
//			},
//			CreateTagFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTagRequest]) (*connect.Response[simoompb.Tag], error) {
//				panic("mock out the CreateTag method")
//			},
//			CreateTaskFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTaskRequest]) (*connect.Response[simoompb.Task], error) {
//				panic("mock out the CreateTask method")
//			},
//			DeleteProjectFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
//				panic("mock out the DeleteProject method")
//			},
//			DeleteStepFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteStepRequest]) (*connect.Response[emptypb.Empty], error) {
//				panic("mock out the DeleteStep method")
//			},
//			DeleteTagFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
//				panic("mock out the DeleteTag method")
//			},
//			DeleteTaskFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
//				panic("mock out the DeleteTask method")
//			},
//			GetRefreshTokenFunc: func() string {
//				panic("mock out the GetRefreshToken method")
//			},
//			ListProjectsFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.ListProjectsRequest]) (*connect.Response[simoompb.Projects], error) {
//				panic("mock out the ListProjects method")
//			},
//			ListTagsFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.ListTagsRequest]) (*connect.Response[simoompb.Tags], error) {
//				panic("mock out the ListTags method")
//			},
//			ListTasksFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.ListTasksRequest]) (*connect.Response[simoompb.Tasks], error) {
//				panic("mock out the ListTasks method")
//			},
//			RefreshTokenFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.RefreshTokenRequest]) (*connect.Response[simoompb.RefreshTokenResponse], error) {
//				panic("mock out the RefreshToken method")
//			},
//			SignInFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.SignInRequest]) (*connect.Response[simoompb.SignInResponse], error) {
//				panic("mock out the SignIn method")
//			},
//			SignUpFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.SignUpRequest]) (*connect.Response[simoompb.SignUpResponse], error) {
//				panic("mock out the SignUp method")
//			},
//			UpdateProjectFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateProjectRequest]) (*connect.Response[simoompb.Project], error) {
//				panic("mock out the UpdateProject method")
//			},
//			UpdateStepFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateStepRequest]) (*connect.Response[simoompb.Step], error) {
//				panic("mock out the UpdateStep method")
//			},
//			UpdateTagFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTagRequest]) (*connect.Response[simoompb.Tag], error) {
//				panic("mock out the UpdateTag method")
//			},
//			UpdateTaskFunc: func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTaskRequest]) (*connect.Response[simoompb.Task], error) {
//				panic("mock out the UpdateTask method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// CheckCredentialsFunc mocks the CheckCredentials method.
	CheckCredentialsFunc func() bool

	// CheckHealthFunc mocks the CheckHealth method.
	CheckHealthFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.CheckHealthRequest]) (*connect.Response[simoompb.CheckHealthResponse], error)

	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateProjectRequest]) (*connect.Response[simoompb.Project], error)

	// CreateStepFunc mocks the CreateStep method.
	CreateStepFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateStepRequest]) (*connect.Response[simoompb.Step], error)

	// CreateTagFunc mocks the CreateTag method.
	CreateTagFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTagRequest]) (*connect.Response[simoompb.Tag], error)

	// CreateTaskFunc mocks the CreateTask method.
	CreateTaskFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTaskRequest]) (*connect.Response[simoompb.Task], error)

	// DeleteProjectFunc mocks the DeleteProject method.
	DeleteProjectFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)

	// DeleteStepFunc mocks the DeleteStep method.
	DeleteStepFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteStepRequest]) (*connect.Response[emptypb.Empty], error)

	// DeleteTagFunc mocks the DeleteTag method.
	DeleteTagFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error)

	// DeleteTaskFunc mocks the DeleteTask method.
	DeleteTaskFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error)

	// GetRefreshTokenFunc mocks the GetRefreshToken method.
	GetRefreshTokenFunc func() string

	// ListProjectsFunc mocks the ListProjects method.
	ListProjectsFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.ListProjectsRequest]) (*connect.Response[simoompb.Projects], error)

	// ListTagsFunc mocks the ListTags method.
	ListTagsFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.ListTagsRequest]) (*connect.Response[simoompb.Tags], error)

	// ListTasksFunc mocks the ListTasks method.
	ListTasksFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.ListTasksRequest]) (*connect.Response[simoompb.Tasks], error)

	// RefreshTokenFunc mocks the RefreshToken method.
	RefreshTokenFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.RefreshTokenRequest]) (*connect.Response[simoompb.RefreshTokenResponse], error)

	// SignInFunc mocks the SignIn method.
	SignInFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.SignInRequest]) (*connect.Response[simoompb.SignInResponse], error)

	// SignUpFunc mocks the SignUp method.
	SignUpFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.SignUpRequest]) (*connect.Response[simoompb.SignUpResponse], error)

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateProjectRequest]) (*connect.Response[simoompb.Project], error)

	// UpdateStepFunc mocks the UpdateStep method.
	UpdateStepFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateStepRequest]) (*connect.Response[simoompb.Step], error)

	// UpdateTagFunc mocks the UpdateTag method.
	UpdateTagFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTagRequest]) (*connect.Response[simoompb.Tag], error)

	// UpdateTaskFunc mocks the UpdateTask method.
	UpdateTaskFunc func(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTaskRequest]) (*connect.Response[simoompb.Task], error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckCredentials holds details about calls to the CheckCredentials method.
		CheckCredentials []struct {
		}
		// CheckHealth holds details about calls to the CheckHealth method.
		CheckHealth []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.CheckHealthRequest]
		}
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.CreateProjectRequest]
		}
		// CreateStep holds details about calls to the CreateStep method.
		CreateStep []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.CreateStepRequest]
		}
		// CreateTag holds details about calls to the CreateTag method.
		CreateTag []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.CreateTagRequest]
		}
		// CreateTask holds details about calls to the CreateTask method.
		CreateTask []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.CreateTaskRequest]
		}
		// DeleteProject holds details about calls to the DeleteProject method.
		DeleteProject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.DeleteProjectRequest]
		}
		// DeleteStep holds details about calls to the DeleteStep method.
		DeleteStep []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.DeleteStepRequest]
		}
		// DeleteTag holds details about calls to the DeleteTag method.
		DeleteTag []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.DeleteTagRequest]
		}
		// DeleteTask holds details about calls to the DeleteTask method.
		DeleteTask []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.DeleteTaskRequest]
		}
		// GetRefreshToken holds details about calls to the GetRefreshToken method.
		GetRefreshToken []struct {
		}
		// ListProjects holds details about calls to the ListProjects method.
		ListProjects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.ListProjectsRequest]
		}
		// ListTags holds details about calls to the ListTags method.
		ListTags []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.ListTagsRequest]
		}
		// ListTasks holds details about calls to the ListTasks method.
		ListTasks []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.ListTasksRequest]
		}
		// RefreshToken holds details about calls to the RefreshToken method.
		RefreshToken []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.RefreshTokenRequest]
		}
		// SignIn holds details about calls to the SignIn method.
		SignIn []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.SignInRequest]
		}
		// SignUp holds details about calls to the SignUp method.
		SignUp []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.SignUpRequest]
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.UpdateProjectRequest]
		}
		// UpdateStep holds details about calls to the UpdateStep method.
		UpdateStep []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.UpdateStepRequest]
		}
		// UpdateTag holds details about calls to the UpdateTag method.
		UpdateTag []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.UpdateTagRequest]
		}
		// UpdateTask holds details about calls to the UpdateTask method.
		UpdateTask []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Request is the request argument value.
			Request *connect.Request[simoompb.UpdateTaskRequest]
		}
	}
	lockCheckCredentials sync.RWMutex
	lockCheckHealth      sync.RWMutex
	lockCreateProject    sync.RWMutex
	lockCreateStep       sync.RWMutex
	lockCreateTag        sync.RWMutex
	lockCreateTask       sync.RWMutex
	lockDeleteProject    sync.RWMutex
	lockDeleteStep       sync.RWMutex
	lockDeleteTag        sync.RWMutex
	lockDeleteTask       sync.RWMutex
	lockGetRefreshToken  sync.RWMutex
	lockListProjects     sync.RWMutex
	lockListTags         sync.RWMutex
	lockListTasks        sync.RWMutex
	lockRefreshToken     sync.RWMutex
	lockSignIn           sync.RWMutex
	lockSignUp           sync.RWMutex
	lockUpdateProject    sync.RWMutex
	lockUpdateStep       sync.RWMutex
	lockUpdateTag        sync.RWMutex
	lockUpdateTask       sync.RWMutex
}

// CheckCredentials calls CheckCredentialsFunc.
func (mock *ClientMock) CheckCredentials() bool {
	if mock.CheckCredentialsFunc == nil {
		panic("ClientMock.CheckCredentialsFunc: method is nil but Client.CheckCredentials was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCheckCredentials.Lock()
	mock.calls.CheckCredentials = append(mock.calls.CheckCredentials, callInfo)
	mock.lockCheckCredentials.Unlock()
	return mock.CheckCredentialsFunc()
}

// CheckCredentialsCalls gets all the calls that were made to CheckCredentials.
// Check the length with:
//
//	len(mockedClient.CheckCredentialsCalls())
func (mock *ClientMock) CheckCredentialsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCheckCredentials.RLock()
	calls = mock.calls.CheckCredentials
	mock.lockCheckCredentials.RUnlock()
	return calls
}

// CheckHealth calls CheckHealthFunc.
func (mock *ClientMock) CheckHealth(contextMoqParam context.Context, request *connect.Request[simoompb.CheckHealthRequest]) (*connect.Response[simoompb.CheckHealthResponse], error) {
	if mock.CheckHealthFunc == nil {
		panic("ClientMock.CheckHealthFunc: method is nil but Client.CheckHealth was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CheckHealthRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockCheckHealth.Lock()
	mock.calls.CheckHealth = append(mock.calls.CheckHealth, callInfo)
	mock.lockCheckHealth.Unlock()
	return mock.CheckHealthFunc(contextMoqParam, request)
}

// CheckHealthCalls gets all the calls that were made to CheckHealth.
// Check the length with:
//
//	len(mockedClient.CheckHealthCalls())
func (mock *ClientMock) CheckHealthCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.CheckHealthRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CheckHealthRequest]
	}
	mock.lockCheckHealth.RLock()
	calls = mock.calls.CheckHealth
	mock.lockCheckHealth.RUnlock()
	return calls
}

// CreateProject calls CreateProjectFunc.
func (mock *ClientMock) CreateProject(contextMoqParam context.Context, request *connect.Request[simoompb.CreateProjectRequest]) (*connect.Response[simoompb.Project], error) {
	if mock.CreateProjectFunc == nil {
		panic("ClientMock.CreateProjectFunc: method is nil but Client.CreateProject was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateProjectRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(contextMoqParam, request)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//
//	len(mockedClient.CreateProjectCalls())
func (mock *ClientMock) CreateProjectCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.CreateProjectRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateProjectRequest]
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// CreateStep calls CreateStepFunc.
func (mock *ClientMock) CreateStep(contextMoqParam context.Context, request *connect.Request[simoompb.CreateStepRequest]) (*connect.Response[simoompb.Step], error) {
	if mock.CreateStepFunc == nil {
		panic("ClientMock.CreateStepFunc: method is nil but Client.CreateStep was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateStepRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockCreateStep.Lock()
	mock.calls.CreateStep = append(mock.calls.CreateStep, callInfo)
	mock.lockCreateStep.Unlock()
	return mock.CreateStepFunc(contextMoqParam, request)
}

// CreateStepCalls gets all the calls that were made to CreateStep.
// Check the length with:
//
//	len(mockedClient.CreateStepCalls())
func (mock *ClientMock) CreateStepCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.CreateStepRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateStepRequest]
	}
	mock.lockCreateStep.RLock()
	calls = mock.calls.CreateStep
	mock.lockCreateStep.RUnlock()
	return calls
}

// CreateTag calls CreateTagFunc.
func (mock *ClientMock) CreateTag(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTagRequest]) (*connect.Response[simoompb.Tag], error) {
	if mock.CreateTagFunc == nil {
		panic("ClientMock.CreateTagFunc: method is nil but Client.CreateTag was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateTagRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockCreateTag.Lock()
	mock.calls.CreateTag = append(mock.calls.CreateTag, callInfo)
	mock.lockCreateTag.Unlock()
	return mock.CreateTagFunc(contextMoqParam, request)
}

// CreateTagCalls gets all the calls that were made to CreateTag.
// Check the length with:
//
//	len(mockedClient.CreateTagCalls())
func (mock *ClientMock) CreateTagCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.CreateTagRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateTagRequest]
	}
	mock.lockCreateTag.RLock()
	calls = mock.calls.CreateTag
	mock.lockCreateTag.RUnlock()
	return calls
}

// CreateTask calls CreateTaskFunc.
func (mock *ClientMock) CreateTask(contextMoqParam context.Context, request *connect.Request[simoompb.CreateTaskRequest]) (*connect.Response[simoompb.Task], error) {
	if mock.CreateTaskFunc == nil {
		panic("ClientMock.CreateTaskFunc: method is nil but Client.CreateTask was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateTaskRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockCreateTask.Lock()
	mock.calls.CreateTask = append(mock.calls.CreateTask, callInfo)
	mock.lockCreateTask.Unlock()
	return mock.CreateTaskFunc(contextMoqParam, request)
}

// CreateTaskCalls gets all the calls that were made to CreateTask.
// Check the length with:
//
//	len(mockedClient.CreateTaskCalls())
func (mock *ClientMock) CreateTaskCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.CreateTaskRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.CreateTaskRequest]
	}
	mock.lockCreateTask.RLock()
	calls = mock.calls.CreateTask
	mock.lockCreateTask.RUnlock()
	return calls
}

// DeleteProject calls DeleteProjectFunc.
func (mock *ClientMock) DeleteProject(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	if mock.DeleteProjectFunc == nil {
		panic("ClientMock.DeleteProjectFunc: method is nil but Client.DeleteProject was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteProjectRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockDeleteProject.Lock()
	mock.calls.DeleteProject = append(mock.calls.DeleteProject, callInfo)
	mock.lockDeleteProject.Unlock()
	return mock.DeleteProjectFunc(contextMoqParam, request)
}

// DeleteProjectCalls gets all the calls that were made to DeleteProject.
// Check the length with:
//
//	len(mockedClient.DeleteProjectCalls())
func (mock *ClientMock) DeleteProjectCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.DeleteProjectRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteProjectRequest]
	}
	mock.lockDeleteProject.RLock()
	calls = mock.calls.DeleteProject
	mock.lockDeleteProject.RUnlock()
	return calls
}

// DeleteStep calls DeleteStepFunc.
func (mock *ClientMock) DeleteStep(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteStepRequest]) (*connect.Response[emptypb.Empty], error) {
	if mock.DeleteStepFunc == nil {
		panic("ClientMock.DeleteStepFunc: method is nil but Client.DeleteStep was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteStepRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockDeleteStep.Lock()
	mock.calls.DeleteStep = append(mock.calls.DeleteStep, callInfo)
	mock.lockDeleteStep.Unlock()
	return mock.DeleteStepFunc(contextMoqParam, request)
}

// DeleteStepCalls gets all the calls that were made to DeleteStep.
// Check the length with:
//
//	len(mockedClient.DeleteStepCalls())
func (mock *ClientMock) DeleteStepCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.DeleteStepRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteStepRequest]
	}
	mock.lockDeleteStep.RLock()
	calls = mock.calls.DeleteStep
	mock.lockDeleteStep.RUnlock()
	return calls
}

// DeleteTag calls DeleteTagFunc.
func (mock *ClientMock) DeleteTag(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
	if mock.DeleteTagFunc == nil {
		panic("ClientMock.DeleteTagFunc: method is nil but Client.DeleteTag was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteTagRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockDeleteTag.Lock()
	mock.calls.DeleteTag = append(mock.calls.DeleteTag, callInfo)
	mock.lockDeleteTag.Unlock()
	return mock.DeleteTagFunc(contextMoqParam, request)
}

// DeleteTagCalls gets all the calls that were made to DeleteTag.
// Check the length with:
//
//	len(mockedClient.DeleteTagCalls())
func (mock *ClientMock) DeleteTagCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.DeleteTagRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteTagRequest]
	}
	mock.lockDeleteTag.RLock()
	calls = mock.calls.DeleteTag
	mock.lockDeleteTag.RUnlock()
	return calls
}

// DeleteTask calls DeleteTaskFunc.
func (mock *ClientMock) DeleteTask(contextMoqParam context.Context, request *connect.Request[simoompb.DeleteTaskRequest]) (*connect.Response[emptypb.Empty], error) {
	if mock.DeleteTaskFunc == nil {
		panic("ClientMock.DeleteTaskFunc: method is nil but Client.DeleteTask was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteTaskRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockDeleteTask.Lock()
	mock.calls.DeleteTask = append(mock.calls.DeleteTask, callInfo)
	mock.lockDeleteTask.Unlock()
	return mock.DeleteTaskFunc(contextMoqParam, request)
}

// DeleteTaskCalls gets all the calls that were made to DeleteTask.
// Check the length with:
//
//	len(mockedClient.DeleteTaskCalls())
func (mock *ClientMock) DeleteTaskCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.DeleteTaskRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.DeleteTaskRequest]
	}
	mock.lockDeleteTask.RLock()
	calls = mock.calls.DeleteTask
	mock.lockDeleteTask.RUnlock()
	return calls
}

// GetRefreshToken calls GetRefreshTokenFunc.
func (mock *ClientMock) GetRefreshToken() string {
	if mock.GetRefreshTokenFunc == nil {
		panic("ClientMock.GetRefreshTokenFunc: method is nil but Client.GetRefreshToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRefreshToken.Lock()
	mock.calls.GetRefreshToken = append(mock.calls.GetRefreshToken, callInfo)
	mock.lockGetRefreshToken.Unlock()
	return mock.GetRefreshTokenFunc()
}

// GetRefreshTokenCalls gets all the calls that were made to GetRefreshToken.
// Check the length with:
//
//	len(mockedClient.GetRefreshTokenCalls())
func (mock *ClientMock) GetRefreshTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRefreshToken.RLock()
	calls = mock.calls.GetRefreshToken
	mock.lockGetRefreshToken.RUnlock()
	return calls
}

// ListProjects calls ListProjectsFunc.
func (mock *ClientMock) ListProjects(contextMoqParam context.Context, request *connect.Request[simoompb.ListProjectsRequest]) (*connect.Response[simoompb.Projects], error) {
	if mock.ListProjectsFunc == nil {
		panic("ClientMock.ListProjectsFunc: method is nil but Client.ListProjects was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListProjectsRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockListProjects.Lock()
	mock.calls.ListProjects = append(mock.calls.ListProjects, callInfo)
	mock.lockListProjects.Unlock()
	return mock.ListProjectsFunc(contextMoqParam, request)
}

// ListProjectsCalls gets all the calls that were made to ListProjects.
// Check the length with:
//
//	len(mockedClient.ListProjectsCalls())
func (mock *ClientMock) ListProjectsCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.ListProjectsRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListProjectsRequest]
	}
	mock.lockListProjects.RLock()
	calls = mock.calls.ListProjects
	mock.lockListProjects.RUnlock()
	return calls
}

// ListTags calls ListTagsFunc.
func (mock *ClientMock) ListTags(contextMoqParam context.Context, request *connect.Request[simoompb.ListTagsRequest]) (*connect.Response[simoompb.Tags], error) {
	if mock.ListTagsFunc == nil {
		panic("ClientMock.ListTagsFunc: method is nil but Client.ListTags was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListTagsRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockListTags.Lock()
	mock.calls.ListTags = append(mock.calls.ListTags, callInfo)
	mock.lockListTags.Unlock()
	return mock.ListTagsFunc(contextMoqParam, request)
}

// ListTagsCalls gets all the calls that were made to ListTags.
// Check the length with:
//
//	len(mockedClient.ListTagsCalls())
func (mock *ClientMock) ListTagsCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.ListTagsRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListTagsRequest]
	}
	mock.lockListTags.RLock()
	calls = mock.calls.ListTags
	mock.lockListTags.RUnlock()
	return calls
}

// ListTasks calls ListTasksFunc.
func (mock *ClientMock) ListTasks(contextMoqParam context.Context, request *connect.Request[simoompb.ListTasksRequest]) (*connect.Response[simoompb.Tasks], error) {
	if mock.ListTasksFunc == nil {
		panic("ClientMock.ListTasksFunc: method is nil but Client.ListTasks was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListTasksRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockListTasks.Lock()
	mock.calls.ListTasks = append(mock.calls.ListTasks, callInfo)
	mock.lockListTasks.Unlock()
	return mock.ListTasksFunc(contextMoqParam, request)
}

// ListTasksCalls gets all the calls that were made to ListTasks.
// Check the length with:
//
//	len(mockedClient.ListTasksCalls())
func (mock *ClientMock) ListTasksCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.ListTasksRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.ListTasksRequest]
	}
	mock.lockListTasks.RLock()
	calls = mock.calls.ListTasks
	mock.lockListTasks.RUnlock()
	return calls
}

// RefreshToken calls RefreshTokenFunc.
func (mock *ClientMock) RefreshToken(contextMoqParam context.Context, request *connect.Request[simoompb.RefreshTokenRequest]) (*connect.Response[simoompb.RefreshTokenResponse], error) {
	if mock.RefreshTokenFunc == nil {
		panic("ClientMock.RefreshTokenFunc: method is nil but Client.RefreshToken was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.RefreshTokenRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockRefreshToken.Lock()
	mock.calls.RefreshToken = append(mock.calls.RefreshToken, callInfo)
	mock.lockRefreshToken.Unlock()
	return mock.RefreshTokenFunc(contextMoqParam, request)
}

// RefreshTokenCalls gets all the calls that were made to RefreshToken.
// Check the length with:
//
//	len(mockedClient.RefreshTokenCalls())
func (mock *ClientMock) RefreshTokenCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.RefreshTokenRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.RefreshTokenRequest]
	}
	mock.lockRefreshToken.RLock()
	calls = mock.calls.RefreshToken
	mock.lockRefreshToken.RUnlock()
	return calls
}

// SignIn calls SignInFunc.
func (mock *ClientMock) SignIn(contextMoqParam context.Context, request *connect.Request[simoompb.SignInRequest]) (*connect.Response[simoompb.SignInResponse], error) {
	if mock.SignInFunc == nil {
		panic("ClientMock.SignInFunc: method is nil but Client.SignIn was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.SignInRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockSignIn.Lock()
	mock.calls.SignIn = append(mock.calls.SignIn, callInfo)
	mock.lockSignIn.Unlock()
	return mock.SignInFunc(contextMoqParam, request)
}

// SignInCalls gets all the calls that were made to SignIn.
// Check the length with:
//
//	len(mockedClient.SignInCalls())
func (mock *ClientMock) SignInCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.SignInRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.SignInRequest]
	}
	mock.lockSignIn.RLock()
	calls = mock.calls.SignIn
	mock.lockSignIn.RUnlock()
	return calls
}

// SignUp calls SignUpFunc.
func (mock *ClientMock) SignUp(contextMoqParam context.Context, request *connect.Request[simoompb.SignUpRequest]) (*connect.Response[simoompb.SignUpResponse], error) {
	if mock.SignUpFunc == nil {
		panic("ClientMock.SignUpFunc: method is nil but Client.SignUp was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.SignUpRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockSignUp.Lock()
	mock.calls.SignUp = append(mock.calls.SignUp, callInfo)
	mock.lockSignUp.Unlock()
	return mock.SignUpFunc(contextMoqParam, request)
}

// SignUpCalls gets all the calls that were made to SignUp.
// Check the length with:
//
//	len(mockedClient.SignUpCalls())
func (mock *ClientMock) SignUpCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.SignUpRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.SignUpRequest]
	}
	mock.lockSignUp.RLock()
	calls = mock.calls.SignUp
	mock.lockSignUp.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ClientMock) UpdateProject(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateProjectRequest]) (*connect.Response[simoompb.Project], error) {
	if mock.UpdateProjectFunc == nil {
		panic("ClientMock.UpdateProjectFunc: method is nil but Client.UpdateProject was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateProjectRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	return mock.UpdateProjectFunc(contextMoqParam, request)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//
//	len(mockedClient.UpdateProjectCalls())
func (mock *ClientMock) UpdateProjectCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.UpdateProjectRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateProjectRequest]
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}

// UpdateStep calls UpdateStepFunc.
func (mock *ClientMock) UpdateStep(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateStepRequest]) (*connect.Response[simoompb.Step], error) {
	if mock.UpdateStepFunc == nil {
		panic("ClientMock.UpdateStepFunc: method is nil but Client.UpdateStep was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateStepRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockUpdateStep.Lock()
	mock.calls.UpdateStep = append(mock.calls.UpdateStep, callInfo)
	mock.lockUpdateStep.Unlock()
	return mock.UpdateStepFunc(contextMoqParam, request)
}

// UpdateStepCalls gets all the calls that were made to UpdateStep.
// Check the length with:
//
//	len(mockedClient.UpdateStepCalls())
func (mock *ClientMock) UpdateStepCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.UpdateStepRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateStepRequest]
	}
	mock.lockUpdateStep.RLock()
	calls = mock.calls.UpdateStep
	mock.lockUpdateStep.RUnlock()
	return calls
}

// UpdateTag calls UpdateTagFunc.
func (mock *ClientMock) UpdateTag(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTagRequest]) (*connect.Response[simoompb.Tag], error) {
	if mock.UpdateTagFunc == nil {
		panic("ClientMock.UpdateTagFunc: method is nil but Client.UpdateTag was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateTagRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockUpdateTag.Lock()
	mock.calls.UpdateTag = append(mock.calls.UpdateTag, callInfo)
	mock.lockUpdateTag.Unlock()
	return mock.UpdateTagFunc(contextMoqParam, request)
}

// UpdateTagCalls gets all the calls that were made to UpdateTag.
// Check the length with:
//
//	len(mockedClient.UpdateTagCalls())
func (mock *ClientMock) UpdateTagCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.UpdateTagRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateTagRequest]
	}
	mock.lockUpdateTag.RLock()
	calls = mock.calls.UpdateTag
	mock.lockUpdateTag.RUnlock()
	return calls
}

// UpdateTask calls UpdateTaskFunc.
func (mock *ClientMock) UpdateTask(contextMoqParam context.Context, request *connect.Request[simoompb.UpdateTaskRequest]) (*connect.Response[simoompb.Task], error) {
	if mock.UpdateTaskFunc == nil {
		panic("ClientMock.UpdateTaskFunc: method is nil but Client.UpdateTask was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateTaskRequest]
	}{
		ContextMoqParam: contextMoqParam,
		Request:         request,
	}
	mock.lockUpdateTask.Lock()
	mock.calls.UpdateTask = append(mock.calls.UpdateTask, callInfo)
	mock.lockUpdateTask.Unlock()
	return mock.UpdateTaskFunc(contextMoqParam, request)
}

// UpdateTaskCalls gets all the calls that were made to UpdateTask.
// Check the length with:
//
//	len(mockedClient.UpdateTaskCalls())
func (mock *ClientMock) UpdateTaskCalls() []struct {
	ContextMoqParam context.Context
	Request         *connect.Request[simoompb.UpdateTaskRequest]
} {
	var calls []struct {
		ContextMoqParam context.Context
		Request         *connect.Request[simoompb.UpdateTaskRequest]
	}
	mock.lockUpdateTask.RLock()
	calls = mock.calls.UpdateTask
	mock.lockUpdateTask.RUnlock()
	return calls
}
