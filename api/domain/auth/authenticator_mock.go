// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"sync"

	"github.com/minguu42/simoom/api/domain/model"
)

// Ensure, that AuthenticatorMock does implement Authenticator.
// If this is not the case, regenerate this file with moq.
var _ Authenticator = &AuthenticatorMock{}

// AuthenticatorMock is a mock implementation of Authenticator.
//
//	func TestSomethingThatUsesAuthenticator(t *testing.T) {
//
//		// make and configure a mocked Authenticator
//		mockedAuthenticator := &AuthenticatorMock{
//			CreateAccessTokenFunc: func(ctx context.Context, user model.User) (string, error) {
//				panic("mock out the CreateAccessToken method")
//			},
//			CreateRefreshTokenFunc: func(ctx context.Context, user model.User) (string, error) {
//				panic("mock out the CreateRefreshToken method")
//			},
//			ExtractIDFromAccessTokenFunc: func(token string) (string, error) {
//				panic("mock out the ExtractIDFromAccessToken method")
//			},
//			ExtractIDFromRefreshTokenFunc: func(token string) (string, error) {
//				panic("mock out the ExtractIDFromRefreshToken method")
//			},
//		}
//
//		// use mockedAuthenticator in code that requires Authenticator
//		// and then make assertions.
//
//	}
type AuthenticatorMock struct {
	// CreateAccessTokenFunc mocks the CreateAccessToken method.
	CreateAccessTokenFunc func(ctx context.Context, user model.User) (string, error)

	// CreateRefreshTokenFunc mocks the CreateRefreshToken method.
	CreateRefreshTokenFunc func(ctx context.Context, user model.User) (string, error)

	// ExtractIDFromAccessTokenFunc mocks the ExtractIDFromAccessToken method.
	ExtractIDFromAccessTokenFunc func(token string) (string, error)

	// ExtractIDFromRefreshTokenFunc mocks the ExtractIDFromRefreshToken method.
	ExtractIDFromRefreshTokenFunc func(token string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccessToken holds details about calls to the CreateAccessToken method.
		CreateAccessToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User model.User
		}
		// CreateRefreshToken holds details about calls to the CreateRefreshToken method.
		CreateRefreshToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User model.User
		}
		// ExtractIDFromAccessToken holds details about calls to the ExtractIDFromAccessToken method.
		ExtractIDFromAccessToken []struct {
			// Token is the token argument value.
			Token string
		}
		// ExtractIDFromRefreshToken holds details about calls to the ExtractIDFromRefreshToken method.
		ExtractIDFromRefreshToken []struct {
			// Token is the token argument value.
			Token string
		}
	}
	lockCreateAccessToken         sync.RWMutex
	lockCreateRefreshToken        sync.RWMutex
	lockExtractIDFromAccessToken  sync.RWMutex
	lockExtractIDFromRefreshToken sync.RWMutex
}

// CreateAccessToken calls CreateAccessTokenFunc.
func (mock *AuthenticatorMock) CreateAccessToken(ctx context.Context, user model.User) (string, error) {
	if mock.CreateAccessTokenFunc == nil {
		panic("AuthenticatorMock.CreateAccessTokenFunc: method is nil but Authenticator.CreateAccessToken was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User model.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateAccessToken.Lock()
	mock.calls.CreateAccessToken = append(mock.calls.CreateAccessToken, callInfo)
	mock.lockCreateAccessToken.Unlock()
	return mock.CreateAccessTokenFunc(ctx, user)
}

// CreateAccessTokenCalls gets all the calls that were made to CreateAccessToken.
// Check the length with:
//
//	len(mockedAuthenticator.CreateAccessTokenCalls())
func (mock *AuthenticatorMock) CreateAccessTokenCalls() []struct {
	Ctx  context.Context
	User model.User
} {
	var calls []struct {
		Ctx  context.Context
		User model.User
	}
	mock.lockCreateAccessToken.RLock()
	calls = mock.calls.CreateAccessToken
	mock.lockCreateAccessToken.RUnlock()
	return calls
}

// CreateRefreshToken calls CreateRefreshTokenFunc.
func (mock *AuthenticatorMock) CreateRefreshToken(ctx context.Context, user model.User) (string, error) {
	if mock.CreateRefreshTokenFunc == nil {
		panic("AuthenticatorMock.CreateRefreshTokenFunc: method is nil but Authenticator.CreateRefreshToken was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User model.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateRefreshToken.Lock()
	mock.calls.CreateRefreshToken = append(mock.calls.CreateRefreshToken, callInfo)
	mock.lockCreateRefreshToken.Unlock()
	return mock.CreateRefreshTokenFunc(ctx, user)
}

// CreateRefreshTokenCalls gets all the calls that were made to CreateRefreshToken.
// Check the length with:
//
//	len(mockedAuthenticator.CreateRefreshTokenCalls())
func (mock *AuthenticatorMock) CreateRefreshTokenCalls() []struct {
	Ctx  context.Context
	User model.User
} {
	var calls []struct {
		Ctx  context.Context
		User model.User
	}
	mock.lockCreateRefreshToken.RLock()
	calls = mock.calls.CreateRefreshToken
	mock.lockCreateRefreshToken.RUnlock()
	return calls
}

// ExtractIDFromAccessToken calls ExtractIDFromAccessTokenFunc.
func (mock *AuthenticatorMock) ExtractIDFromAccessToken(token string) (string, error) {
	if mock.ExtractIDFromAccessTokenFunc == nil {
		panic("AuthenticatorMock.ExtractIDFromAccessTokenFunc: method is nil but Authenticator.ExtractIDFromAccessToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockExtractIDFromAccessToken.Lock()
	mock.calls.ExtractIDFromAccessToken = append(mock.calls.ExtractIDFromAccessToken, callInfo)
	mock.lockExtractIDFromAccessToken.Unlock()
	return mock.ExtractIDFromAccessTokenFunc(token)
}

// ExtractIDFromAccessTokenCalls gets all the calls that were made to ExtractIDFromAccessToken.
// Check the length with:
//
//	len(mockedAuthenticator.ExtractIDFromAccessTokenCalls())
func (mock *AuthenticatorMock) ExtractIDFromAccessTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockExtractIDFromAccessToken.RLock()
	calls = mock.calls.ExtractIDFromAccessToken
	mock.lockExtractIDFromAccessToken.RUnlock()
	return calls
}

// ExtractIDFromRefreshToken calls ExtractIDFromRefreshTokenFunc.
func (mock *AuthenticatorMock) ExtractIDFromRefreshToken(token string) (string, error) {
	if mock.ExtractIDFromRefreshTokenFunc == nil {
		panic("AuthenticatorMock.ExtractIDFromRefreshTokenFunc: method is nil but Authenticator.ExtractIDFromRefreshToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockExtractIDFromRefreshToken.Lock()
	mock.calls.ExtractIDFromRefreshToken = append(mock.calls.ExtractIDFromRefreshToken, callInfo)
	mock.lockExtractIDFromRefreshToken.Unlock()
	return mock.ExtractIDFromRefreshTokenFunc(token)
}

// ExtractIDFromRefreshTokenCalls gets all the calls that were made to ExtractIDFromRefreshToken.
// Check the length with:
//
//	len(mockedAuthenticator.ExtractIDFromRefreshTokenCalls())
func (mock *AuthenticatorMock) ExtractIDFromRefreshTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockExtractIDFromRefreshToken.RLock()
	calls = mock.calls.ExtractIDFromRefreshToken
	mock.lockExtractIDFromRefreshToken.RUnlock()
	return calls
}
