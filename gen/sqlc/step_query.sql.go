// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: step_query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createStep = `-- name: CreateStep :exec
INSERT INTO steps (id, user_id, task_id, title, completed_at, created_at, updated_at)
VALUES (?, ?, ?, ?, NULL, ?, ?)
`

type CreateStepParams struct {
	ID        string
	UserID    string
	TaskID    string
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateStep(ctx context.Context, arg CreateStepParams) error {
	_, err := q.db.ExecContext(ctx, createStep,
		arg.ID,
		arg.UserID,
		arg.TaskID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteStep = `-- name: DeleteStep :exec
DELETE
FROM steps
WHERE id = ?
`

func (q *Queries) DeleteStep(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteStep, id)
	return err
}

const getStepByID = `-- name: GetStepByID :one
SELECT id, user_id, task_id, title, completed_at, created_at, updated_at
FROM steps
WHERE id = ?
`

func (q *Queries) GetStepByID(ctx context.Context, id string) (Step, error) {
	row := q.db.QueryRowContext(ctx, getStepByID, id)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TaskID,
		&i.Title,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStepsByTaskID = `-- name: ListStepsByTaskID :many
SELECT id, user_id, task_id, title, completed_at, created_at, updated_at
FROM steps
WHERE task_id = ?
ORDER BY created_at
`

func (q *Queries) ListStepsByTaskID(ctx context.Context, taskID string) ([]Step, error) {
	rows, err := q.db.QueryContext(ctx, listStepsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Step
	for rows.Next() {
		var i Step
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TaskID,
			&i.Title,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStep = `-- name: UpdateStep :exec
UPDATE steps
SET title        = ?,
    completed_at = ?
WHERE id = ?
`

type UpdateStepParams struct {
	Title       string
	CompletedAt sql.NullTime
	ID          string
}

func (q *Queries) UpdateStep(ctx context.Context, arg UpdateStepParams) error {
	_, err := q.db.ExecContext(ctx, updateStep, arg.Title, arg.CompletedAt, arg.ID)
	return err
}
