// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tag_query.sql

package sqlc

import (
	"context"
	"time"
)

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (id, user_id, name)
VALUES (?, ?, ?)
`

type CreateTagParams struct {
	ID     string
	UserID string
	Name   string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.ExecContext(ctx, createTag, arg.ID, arg.UserID, arg.Name)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE
FROM tags
WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, user_id, name, created_at, updated_at
FROM tags
WHERE id = ?
`

func (q *Queries) GetTagByID(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTagsByTaskID = `-- name: ListTagsByTaskID :many
SELECT t.id, t.user_id, t.name, t.created_at, t.updated_at
FROM tags AS t
    INNER JOIN tasks_tags AS tt ON t.id = tt.tag_id
WHERE tt.task_id = ?
`

func (q *Queries) ListTagsByTaskID(ctx context.Context, taskID string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByUserID = `-- name: ListTagsByUserID :many
SELECT id, user_id, name, created_at, updated_at
FROM tags
WHERE user_id = ?
ORDER BY created_at
LIMIT ? OFFSET ?
`

type ListTagsByUserIDParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) ListTagsByUserID(ctx context.Context, arg ListTagsByUserIDParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET name       = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateTagParams struct {
	Name      string
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.Name, arg.UpdatedAt, arg.ID)
	return err
}
